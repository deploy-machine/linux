#!/bin/bash

# Install wallpaper software, imagick and ffmpeg
sudo apt install -y feh ffmpeg imagemagick

XPROFILE_FILE="$DEV_ENV_HOME/env/.xprofile"

TARGET_WALLPAPER=""
DETECTED_OS_NAME="" # For user feedback

# --- 1. OS Detection ---
echo "Detecting operating system..."

# Prefer /etc/os-release as it's the standard on modern Linux distributions
if [ -f /etc/os-release ]; then
    . /etc/os-release # Source the file to get variables like ID, NAME, PRETTY_NAME, ID_LIKE
    OS_PRIMARY_ID=$(echo "$ID" | tr '[:upper:]' '[:lower:]') # Normalize to lowercase
    DETECTED_OS_NAME="$PRETTY_NAME" # Use PRETTY_NAME or NAME for better user feedback

    case "$OS_PRIMARY_ID" in
        ubuntu) TARGET_WALLPAPER="od_ubuntu.png" ;;
        pop) TARGET_WALLPAPER="od_popos.png" ;;
        debian) TARGET_WALLPAPER="od_debian.png" ;;
        fedora) TARGET_WALLPAPER="od_fedora.png" ;;
        arch) TARGET_WALLPAPER="od_arch.png" ;;
        artix) TARGET_WALLPAPER="od_artix.png" ;;
        endeavouros) TARGET_WALLPAPER="od_endeavouros.png" ;;
        gentoo) TARGET_WALLPAPER="od_gentoo.png" ;;
        kali) TARGET_WALLPAPER="od_kali.png" ;;
        manjaro) TARGET_WALLPAPER="od_manjaro.png" ;;
        linuxmint|mint) TARGET_WALLPAPER="od_mint.png" ;; # Handles ID=linuxmint or ID=mint
        nixos) TARGET_WALLPAPER="od_nixos.png" ;;
        rhel) TARGET_WALLPAPER="od_rhel.png" ;;
        void) TARGET_WALLPAPER="od_void.png" ;;
        guix|guixsd) TARGET_WALLPAPER="od_gnu.png" ;; # Guix System often uses 'guix' or 'guixsd'
        opensuse-leap) TARGET_WALLPAPER="od_leap.png" ;;
        opensuse-tumbleweed) TARGET_WALLPAPER="od_tumbleweed.png" ;;
        *)
            # Fallback using ID_LIKE if specific ID wasn't matched or is more generic
            OS_ID_LIKE_LOWER=$(echo "$ID_LIKE" | tr '[:upper:]' '[:lower:]')
            if [[ -n "$OS_ID_LIKE_LOWER" ]]; then
                echo "Primary OS ID '$OS_PRIMARY_ID' not directly mapped. Checking ID_LIKE ('$OS_ID_LIKE_LOWER')."
                # Prioritize more specific ID_LIKE matches if possible
                if echo "$OS_ID_LIKE_LOWER" | grep -q "ubuntu" && [[ "$OS_PRIMARY_ID" != "linuxmint" ]]; then
                    TARGET_WALLPAPER="od_ubuntu.png"
                    DETECTED_OS_NAME="$PRETTY_NAME (identified as Ubuntu-like via ID_LIKE)"
                elif echo "$OS_ID_LIKE_LOWER" | grep -q "debian" && [[ "$OS_PRIMARY_ID" != "ubuntu" && "$OS_PRIMARY_ID" != "linuxmint" ]]; then
                    TARGET_WALLPAPER="od_debian.png"
                    DETECTED_OS_NAME="$PRETTY_NAME (identified as Debian-like via ID_LIKE)"
                elif echo "$OS_ID_LIKE_LOWER" | grep -q "arch" && ! (echo "$OS_PRIMARY_ID" | grep -Eq "^(manjaro|endeavouros|artix)$"); then
                    TARGET_WALLPAPER="od_arch.png"
                    DETECTED_OS_NAME="$PRETTY_NAME (identified as Arch-like via ID_LIKE)"
                elif echo "$OS_ID_LIKE_LOWER" | grep -q "fedora" && [[ "$OS_PRIMARY_ID" != "rhel" ]]; then
                    TARGET_WALLPAPER="od_fedora.png"
                    DETECTED_OS_NAME="$PRETTY_NAME (identified as Fedora-like via ID_LIKE)"
                elif echo "$OS_ID_LIKE_LOWER" | grep -q "suse" && ! (echo "$OS_PRIMARY_ID" | grep -Eq "^(opensuse-leap|opensuse-tumbleweed)$"); then
                    TARGET_WALLPAPER="od_leap.png" # Defaulting to leap for generic suse
                    DETECTED_OS_NAME="$PRETTY_NAME (identified as openSUSE-like via ID_LIKE, mapped to Leap)"
                fi
            fi
            if [ -z "$TARGET_WALLPAPER" ]; then # If still no match after ID_LIKE
                echo "OS '$OS_PRIMARY_ID' ($PRETTY_NAME) is not explicitly mapped, and ID_LIKE ('$OS_ID_LIKE_LOWER') did not yield a specific match."
                TARGET_WALLPAPER="od_gnu.png" # Fallback to generic GNU/Linux wallpaper
                DETECTED_OS_NAME="$PRETTY_NAME (using generic od_gnu.png wallpaper as fallback)"
            fi
            ;;
    esac
# Fallback to uname if /etc/os-release is not available
elif uname -s &>/dev/null; then
    KERNEL_NAME_LOWER=$(uname -s | tr '[:upper:]' '[:lower:]')
    DETECTED_OS_NAME=$(uname -s) # Store original kernel name for feedback
    case "$KERNEL_NAME_LOWER" in
        linux)
            DETECTED_OS_NAME="Linux (unknown distribution, /etc/os-release missing)"
            TARGET_WALLPAPER="od_gnu.png" # Generic GNU/Linux wallpaper
            ;;
        freebsd)
            TARGET_WALLPAPER="od_freebsd.png"
            ;;
        openbsd)
            TARGET_WALLPAPER="od_openbsd.png"
            ;;
        darwin) # macOS
            TARGET_WALLPAPER="od_apple.png"
            # Note: .xprofile is typically used with XQuartz on macOS
            ;;
        *)
            DETECTED_OS_NAME="Unknown OS (kernel: $KERNEL_NAME_LOWER)"
            TARGET_WALLPAPER="od_gnu.png" # Fallback for other unknown Unix-like systems
            ;;
    esac
else
    echo "ERROR: Cannot determine operating system. Neither /etc/os-release nor uname is available/functional."
    exit 1
fi

# --- 2. Wallpaper Update Logic ---
if [ -z "$TARGET_WALLPAPER" ]; then
    echo "CRITICAL ERROR: TARGET_WALLPAPER variable is empty after OS detection for '$DETECTED_OS_NAME'. This should not happen."
    exit 1
fi

echo "Detected OS: $DETECTED_OS_NAME."
echo "Target wallpaper will be: $TARGET_WALLPAPER"

# Verify .xprofile exists
if [ ! -f "$XPROFILE_FILE" ]; then
    echo "ERROR: .xprofile file not found at '$XPROFILE_FILE'"
    echo "Please ensure the XPROFILE_FILE path in the script is correct and the script is run from an appropriate directory."
    exit 1
fi

# Check if the wallpaper is already correctly set
# Using grep -F for fixed string (safer) and -q for quiet mode
if grep -Fq "DISTRO_WALLPAPER=\"${TARGET_WALLPAPER}\"" "$XPROFILE_FILE"; then
    echo "Wallpaper in '$XPROFILE_FILE' is already set to '$TARGET_WALLPAPER'. No changes needed."
    exit 0
fi

echo "Wallpaper in '$XPROFILE_FILE' needs to be updated."

# Create a timestamped backup of the original file before modification
BACKUP_FILE="${XPROFILE_FILE}.$(date +%Y%m%d_%H%M%S).bak"
cp "$XPROFILE_FILE" "$BACKUP_FILE"
if [ $? -ne 0 ]; then
    echo "ERROR: Failed to create backup file at '$BACKUP_FILE'. Aborting."
    exit 1
fi
echo "Backup of '$XPROFILE_FILE' created at '$BACKUP_FILE'"

# --- 3. Perform the replacement using sed ---
# This command finds the line starting with DISTRO_WALLPAPER= and replaces the whole line.
# It assumes the line `DISTRO_WALLPAPER="..."` exists, as per your problem description.
# If the line might be missing, more complex logic would be needed to add it.

# Using a temporary file for sed modification is safer
TMP_FILE=$(mktemp)
if [ -z "$TMP_FILE" ]; then
    echo "ERROR: Failed to create a temporary file. Aborting."
    exit 1
fi

if sed "s|^DISTRO_WALLPAPER=.*|DISTRO_WALLPAPER=\"${TARGET_WALLPAPER}\"|" "$XPROFILE_FILE" > "$TMP_FILE"; then
    if [ -s "$TMP_FILE" ] && grep -Fq "DISTRO_WALLPAPER=\"${TARGET_WALLPAPER}\"" "$TMP_FILE"; then
        mv "$TMP_FILE" "$XPROFILE_FILE"
        if [ $? -eq 0 ]; then
            echo "SUCCESS: Wallpaper in '$XPROFILE_FILE' updated to '$TARGET_WALLPAPER'."
        else
            echo "ERROR: Failed to move temporary file to '$XPROFILE_FILE'. Check permissions."
            echo "Original file is at '$BACKUP_FILE'."
            rm -f "$TMP_FILE" # Clean up temp file
            exit 1
        fi
    else
        echo "ERROR: sed command failed to correctly modify the file or produced an unexpected result."
        echo "The content of the temporary file (sed output) was:"
        cat "$TMP_FILE"
        echo "Original file '$XPROFILE_FILE' has NOT been modified. Backup is at '$BACKUP_FILE'."
        rm -f "$TMP_FILE" # Clean up temp file
        exit 1
    fi
else
    echo "ERROR: sed command execution failed. No changes made to '$XPROFILE_FILE'."
    echo "Original file '$XPROFILE_FILE' has NOT been modified. Backup is at '$BACKUP_FILE'."
    rm -f "$TMP_FILE" # Clean up temp file if it was created
    exit 1
fi

exit 0

